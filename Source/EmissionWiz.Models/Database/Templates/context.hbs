using Autofac;
using Nito.AsyncEx;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace {{Namespace}};

public interface IDatabaseContext: IAsyncDisposable
{
    IModel Model { get; }
{{#each Entities}}
    DbSet<{{EntityName}}> {{EntityPluralizedName}} { get; }
{{/each}}
{{#each StoredProcedures}}
    {{#unless Columns}}Task<int>{{/unless}}{{#if Columns}}IQueryable<{{ResultTypeName}}>{{/if}} {{Name}}({{#each Parameters}}{{#if IsOutput}}out {{/if}}{{CSharpTypeDefinition}}{{#if IsNullable}}?{{/if}} {{CSharpName}}{{#unless @last}}, {{/unless}}{{/each}}{{#unless Columns}}{{#if Parameters}},{{/if}} CancellationToken cancellationToken = default{{/unless}});
{{/each}}
{{#each TableValuedFunctions}}
	[TableValuedFunction("{{Name}}", "AppContext", Schema = "{{Schema}}")]
    IQueryable<{{ResultTypeName}}> {{Name}}({{#each Parameters}}[Parameter(DbType = "{{SqlType}}", Name = "{{ParameterNameWithoutAt}}")] {{CSharpTypeDefinition}}{{#if IsNullableType}}?{{/if}} {{CSharpName}}{{#unless @last}}, {{/unless}}{{/each}});
{{/each}}
    Task<int> CommitChangesAsync(CancellationToken cancellationToken = default);
    DbSet<TEntity> Set<TEntity>() where TEntity : class;
    EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
    DatabaseFacade Database { get; }
    Task BulkInsertAsync<T>(IList<T> entities);
    Task ResetChangesAsync();
    int SaveChanges();
    Task<int> SaveChangesAsync(CancellationToken cancellationToken = default);
    public AsyncLock AsyncLock { get; }
}
public partial class {{ContextName}} : DbContext
{
    {{#each Entities}}
    public virtual DbSet<{{EntityName}}> {{EntityPluralizedName}} { get; set; } = null!;
    {{/each}}

    public IComponentContext ComponentContext { get; }
    public AsyncLock AsyncLock { get; } = new AsyncLock();

    public {{ContextName}}(IComponentContext componentContext, DbContextOptions<{{ContextName}}> options) : base(options)
    {
        ComponentContext = componentContext;
    }
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        {{#each Entities}}
        modelBuilder.Entity<{{EntityName}}>(entity =>
        {
            {{#if HasKey}}
            {{#unless HasSimpleKey}}
            entity.HasKey(e => new { {{#each Keys}}e.{{ColumnName}}{{#unless @last}}, {{/unless}}{{/each}} });
            {{/unless}}
            {{/if}}
            {{#unless HasKey}}
            entity.HasKey(e => new { {{#each Columns}}{{#unless IsNullable}}e.{{Name}}{{#unless @last}}, {{/unless}}{{/unless}}{{/each}} });
            {{/unless}}
            {{#each ColumnsEfPropertyOrder}}
            {{#if HasModifiers}}
            entity.Property(e => e.{{Name}})
            {{~ #if IsIdentity}}.ValueGeneratedOnAdd(){{/if}}
            {{~ #if IsValueGeneratedNever}}.ValueGeneratedNever(){{/if}}
            {{~ #if IsNonUnicodeString}}.IsUnicode(false){{/if}}
            {{~ #if HasDefaultDefinition}}.HasDefaultValueSql("{{DefaultDefinition}}"){{/if}}
            {{~ #if HasComputedColumnSql}}.HasComputedColumnSql("{{ComputedColumnSql}}"){{/if}};
            {{/if}}
            {{/each}}
            {{#each ForeignKeys}}
            {{#if IsOneToOne}}
            entity.HasOne(d => d.{{PropertyName}})
                .WithOne(p => p.{{InversePropertyName}})
            {{#if IsCompositeKey}}
                .HasForeignKey<{{InverseEntityName}}>(d => new { {{#each FkColumns}}d.{{.}}{{#unless @last}}, {{/unless}}{{/each}} })
            {{else}}
                .HasForeignKey<{{InverseEntityName}}>(d => {{#each FkColumns}}d.{{.}}{{/each}})
            {{/if}}
            {{else}}
            entity.HasOne(d => d.{{PropertyName}})
                .WithMany(p => p.{{InversePropertyName}})
            {{#if IsCompositeKey}}
                .HasForeignKey(d => new { {{#each FkColumns}}d.{{.}}{{#unless @last}}, {{/unless}}{{/each}} })
            {{else}}
                .HasForeignKey(d => {{#each FkColumns}}d.{{.}}{{/each}})
            {{/if}}
            {{/if}}
                .HasConstraintName("{{FkName}}");
            {{/each}}
            {{#if HasTriggers}}
            entity.ToTable(tb => {
            {{#each Triggers}}
                tb.HasTrigger("{{TriggerName}}");
            {{/each}}
            });
            {{/if}}
        });
        {{/each}}
        
        {{#each StoredProcedures}}{{#if Columns}}
        modelBuilder.Entity<{{ResultTypeName}}>().HasNoKey();
        {{/if}}{{/each}}            
    }
    //https://stackoverflow.com/questions/59624695/entity-framework-core-3-1-return-value-int-from-stored-procedure
    {{#each StoredProcedures}}
    {{Definition}}
    public {{#unless Columns}}Task<int>{{/unless}}{{#if Columns}}IQueryable<{{ResultTypeName}}>{{/if}} {{Name}}({{#each Parameters}}{{#if IsOutput}}out {{/if}}{{CSharpTypeDefinition}}{{#if IsNullable}}?{{/if}} {{CSharpName}}{{#unless @last}}, {{/unless}}{{/each}}{{#unless Columns}}{{#if Parameters}},{{/if}} CancellationToken cancellationToken = default{{/unless}})
    {
        {{#each Parameters}}
        var {{CSharpName}}Parameter = new SqlParameter("{{ParameterNameWithoutAt}}", {{#unless @IsOutput}}(object{{#if IsNullable}}?{{/if}}){{CSharpName}} ?? DBNull.Value{{/unless}}{{#if IsOutput}}"{{SqlType}}"{{/if}}){{#if IsOutput}}{Direction = ParameterDirection.Output}{{/if}};
        {{/each}}
        {{#unless Columns}}
        var {{Name}}Result =  Database.ExecuteSqlRawAsync("EXEC {{Schema}}.{{Name}} {{#each Parameters}}{{ParameterName}}{{#if IsOutput}} OUTPUT{{/if}}{{#unless @last}}, {{/unless}}{{/each}}", new object[] { {{#each Parameters}}{{#unless @first}}, {{/unless}}{{CSharpName}}Parameter{{/each}} }, cancellationToken);
        {{/unless}}
        {{#if Columns}}
        var {{Name}}Result =  Set<{{ResultTypeName}}>().FromSqlRaw("EXEC {{Schema}}.{{Name}} {{#each Parameters}}{{ParameterName}}{{#if IsOutput}} OUTPUT{{/if}}{{#unless @last}}, {{/unless}}{{/each}}"{{#each Parameters}}, {{CSharpName}}Parameter{{/each}});
        {{/if}}
        {{#each Parameters}}{{#if IsOutput}}
        {{CSharpName}} = ({{CSharpTypeDefinition}}{{#if IsNullableType}}?{{/if}}){{CSharpName}}Parameter.Value;{{/if}}{{/each}}
        return {{Name}}Result;
    }
    {{/each}}
    
    {{#each TableValuedFunctions}}
	[TableValuedFunction("{{Name}}", "AppContext", Schema = "{{Schema}}")]
    public IQueryable<{{ResultTypeName}}> {{Name}}({{#each Parameters}}[Parameter(DbType = "{{SqlType}}", Name = "{{ParameterNameWithoutAt}}")] {{CSharpTypeDefinition}}{{#if IsNullableType}}?{{/if}} {{CSharpName}}{{#unless @last}}, {{/unless}}{{/each}})
    {
		var postfix = "_" + Guid.NewGuid().ToString("N");
		{{#each Parameters}}
		var {{CSharpName}}Parameter = {{CSharpName}} != null
			? new ObjectParameter("{{ParameterNameWithoutAt}}" + postfix, {{CSharpName}})
			: new ObjectParameter("{{ParameterNameWithoutAt}}" + postfix, typeof({{CSharpTypeDefinition}}));
        {{/each}}  
		
        return this.ObjectContext().CreateQuery<{{ResultTypeName}}>("[{{Name}}]({{#each Parameters}}{{ParameterName}}" + postfix + "{{#unless @last}}, {{/unless}}{{/each}})"{{#each Parameters}}, {{CSharpName}}Parameter{{/each}});
    }
    {{/each}}
}