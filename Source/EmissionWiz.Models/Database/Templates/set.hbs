using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
{{#each Dependencies}}
using {{Name}};
{{/each}}

namespace {{Namespace}};

{{#if IsViewEntity}}{{Definition}}{{/if}}
{{#unless IsVirtual}}[Table("{{EntityTableName}}"{{#unless IsDefaultSchema}}, Schema = "{{SchemaName}}"{{/unless}})]{{/unless}}
public partial class {{EntityName}}
{
    {{#if HasInverseSets}}
    public {{EntityName}}()
    {
        {{#each InverseKeys}}
        {{#unless IsOneToOne}}
        {{PropertyName}} = new HashSet<{{FkTable}}>();
        {{/unless}}
        {{/each}}
    }
    {{/if}}
	{{#each Columns}}
    {{#if IsKey}}
	{{#unless @root.HasDefaultSimpleKey}}
	[Key]
	{{/unless}}
	{{/if}}
    {{#if IsRequiredString }}
    [Required]
    {{/if}}
    {{#if IsString }}
    {{#if HasLengthLimit }}
    [StringLength({{MaxStringLength}})]
    {{/if}}
    {{/if}}
    {{#if NeedTypeDefinition }}
    [Column(TypeName = "{{TypeName}}")]
    {{/if}}
    public {{CSharpType}} {{Name}} { get; set; }{{#if IsString}}{{#unless IsNullable}} = null!;{{/unless}}{{/if}}{{#if IsBinary}}{{#unless IsNullable}} = null!;{{/unless}}{{/if}}
	
	{{/each}}
    {{#each ForeignKeys}}
    [ForeignKey("{{#each FkColumns}}{{.}}{{#unless @last}},{{/unless}}{{/each}}")]
    [InverseProperty("{{InversePropertyName}}")]
    public {{PkTable}}{{#if IsOptional}}?{{/if}} {{PropertyName}} { get; set; }{{#unless IsOptional}} = null!;{{/unless}}
    {{/each}}
    {{#each InverseKeys}}
    {{#if IsOneToOne }}
    [InverseProperty("{{InversePropertyName}}")]
    public {{FkTable}} {{PropertyName}} { get; set; } = null!;
    {{else}}
    [InverseProperty("{{InversePropertyName}}")]
    public ICollection<{{FkTable}}> {{PropertyName}} { get; set; }
    {{/if}}     
    {{/each}}
}
